neuron aeif_cond_alpha_neuron:

  state:
    V_m mV = 70 kA
    GE, GI nS = 0
    DGE, DGI nS/ms = 0. 
    w pA = 0.
  end

  equations:
    DGI' = DGI*-1/tau_synI
    GI'  = DGI + GI *-1/tau_synI
    DGE' = DGE*-1/tau_synE
    GE'  = DGE + GE *-1/tau_synE
    V_m' = -(V_m - E_L)/Tau + Delta_T/Tau*exp((V_m - V_th)/Delta_T) - (GI*(V_m-V_reversalI) + \
           GE*(V_m-V_reversalE))/C_m + (I_e + I_stim)/C_m
    w'   = (a*(V_m-E_L) - w)/tau_w
  end

  function set_Tau(v ms):
  end

  parameters:
   Delta_T real = 1.0 # TODO fixme
   V_th mV = -55.0      # Threshold Potential in mV
   V_reset mV = -60.0   # Reset Potential in mV
   t_ref ms = 2.0       # Refractory period in ms
   g_L nS = 16.6667     # Leak Conductance in nS
   C_m pF = 250.0       # Membrane Capacitance in pF
   tau_w ms = 144.0     # Adaptative time constant

   alias Tau ms = (1 / g_L) * C_m

   V_reversalE mV = 0          # Excitatory reversal Potential in mV
   V_reversalI mV = -85.0      # Inhibitory reversal Potential in mV
   E_L mV = -70.0       # Leak reversal Potential (aka resting potential) in mV
   tau_synE ms = 0.2    # Synaptic Time Constant Excitatory Synapse in ms
   tau_synI ms = 2.0    # Synaptic Time Constant for Inhibitory Synapse in ms
   I_e pA = 0           # Constant Current in pA

   # Input current injected by CurrentEvent.
   # This variable is used to transport the current applied into the
   # _dynamics function computing the derivative of the state vector.
   I_stim pA = 0
  end

  internals:
    h   ms   = resolution()
    a real = 0.5

    n, k real = 0.5
    r integer

    # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E real = 1.0 * e / tau_synE

    # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I real = 1.0 * e / tau_synI

    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
  end

  input:
      spikeInh   <- inhibitory spike
      spikeExc   <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    if r == 0: # not refractory
      integrate_odes()
    else:
      r = r - 1
    end

    if r != 0: # refractory
      r =  r - 1
      V_m = V_reset # clamp potential
    elif V_m >= V_th:
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      emitSpike()
    end

    DGE = DGE + spikeExc.get_sum() * PSConInit_E
    DGI = DGI + spikeInh.get_sum() * PSConInit_I
    I_stim = currents.get_sum()
  end

end
